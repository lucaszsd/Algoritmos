import java.util.ArrayList;

public class HuxleyCode {

	public static void main(String[] args) {
		
		tree t = new tree("h");
		
		t.add("b");
		t.add("a");
		t.add("d");
		t.add("c");
		t.add("e");
		t.add("g");
		t.add("i");
		t.add("j");
		
		t.inorder();
		
		System.out.println();
		
		t.remove("b", t);
		
		t.inorder();

	}

}





//Representa um arquivo (ou diret贸rio)
class file{
	
	char name;
	String type;
	
	public file(char _name){
		this.name = _name;
		this.type = "file";
	}
	
}

class directory extends file{
	
	char name;
	tree files;
	
	public directory(char _name,directory _parent){
		super(_name);
		files = new tree("/");
		this.type = "directory";
		}

	
	//lista elementos do diret贸rio
	public void ls(){
		this.files.inorder();
	}
	
	
	//cria novo arquivo no diretorio atual
	public void torch(String _name){
		//falsa search
		this.files.add(_name);
	}
	
	public void makedir(String _name){
		//falsa search
		this.files.add(_name);
	}
	
	//imprime nome do diretorio
	public void pwd(){
		System.out.println(this.name);
	}
	
	
	//imprime a cadeia de diretorios conforme pedido
	public void tree(String _type){
		
		switch (type) {
		case "--pre-order":
			files.preorder();
			break;
		case "--in-order":
			files.inorder();
			break;
		case "--post-order":
			files.postorder();
			break;
		default:
			break;
		}
		System.out.println(this.name);
	}
	
	//deleta arquivo ou diretorio
	public void rm(String _name){
		files.remove(_name, files);
	}


}


class filesystem{
	
	directory actualdirectory;
	directory root;
	
	public filesystem() {
		//root serve como referencia para a raiz do sistema de arquivos
		root = new directory('/', null);
		this.actualdirectory = root;
	}
	
	
	public void instruction(String _inst){
		String inst = _inst.split(" ")[0];
		String target = "";
		
		switch(inst){
		
			//entra no diretorio
			case "cd":
				target = _inst.split(" ")[1];
				break;
			//lista elementos do diret贸rio
			case "ls":
				break;
			//cria novo arquivo no diretorio atual
			case "touch":
				target = _inst.split(" ")[1];
				break;
			//cria diret贸rio
			case "mkdir":
				target = _inst.split(" ")[1];
				break;
			//imprime nome do diretorio
			case "pwd":
				System.out.println(this.actualdirectory.name);
				break;
			//imprime a cadeia de diretorios conforme pedido
			case "tree":
				target = _inst.split(" ")[1];
				break;
			//deleta arquivo ou diretorio
			case "rm":
				target = _inst.split(" ")[1];
				break;
			default:
				break;
			
		}
		
		
		
	}
	
}


class tree{
	
	String name;
	tree left;
	tree right;
	
	public tree(String _name){
		this.name = _name;
	}
	
	
	public void add(String _name){
		
		if(_name.compareTo(this.name) >= 0){
			if(this.right == null){
				this.right = new tree(_name);
			}else{
				this.right.add(_name);
			}
		}else{
			if(this.left == null){
				this.left = new tree(_name);
			}else{
				this.left.add(_name);
			}
		}
		
	}
	
	
	public boolean remove(String _name, tree parent){
        if (_name.compareTo(this.name) < 0) {
              if (left != null)
                    return left.remove(_name, this);
              else
                    return false;
        } else if (_name.compareTo(this.name) > 0) {
              if (right != null)
                    return right.remove(_name, this);
              else
                    return false;
        } else {
              if (left != null && right != null) {
                    this.name = right.minValue();
                    right.remove(this.name, this);
              } else if (parent.left == this) {
                    parent.left = (left != null) ? left : right;
              } else if (parent.right == this) {
                    parent.right = (left != null) ? left : right;
              }
              return true;
        }
  }

  public String minValue() {
        if (left == null)
              return name;
        else
              return left.minValue();
  
  }
  
  
  public boolean search(String _name){
	  boolean found = false;
	  
	  if(this.name.compareTo(_name) == 0){
		  found = true;
	  }else{
		  
		  if(this.right != null){
			  if(this.right.search(_name)){
				  found = true;
			  }
		 }
		  
		  if(this.left != null){
			  if(this.left.search(_name)){
				  found = true;
			  }
		  }
		  
	  }
	  
	  return found;
	  
  }


//--------------------------------------------
  
  
//--------------------------------------------
  
	
	public void inorder(){
		
		if(this.left != null){
			this.left.inorder();
		}
		
		System.out.println(this.name);
		
		if(this.right != null){
			this.right.inorder();
		}

	}
	
	
	public void preorder(){
		
		System.out.println(this.name);

		if(this.left != null){
			this.left.preorder();
		}
		
		if(this.right != null){
			this.right.preorder();
		}
		
	}
	
	public void postorder(){
		
		if(this.left != null){
			this.left.postorder();
		}
		
		if(this.right != null){
			this.right.postorder();
		}
		
		System.out.println(this.name);
		
	}
	
	
}
